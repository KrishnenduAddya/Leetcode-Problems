public class Solution {
    public bool IsSubtree(TreeNode root, TreeNode subRoot) {
        if (root == null) 
            return false;
        if (MatchSubtree(root, subRoot))  // Check if subtree matches from root itself
            return true;
        // Check if subtree matches from left or right node of root onwards
        return IsSubtree(root.left, subRoot) || IsSubtree(root.right, subRoot);
    }
    
    private bool MatchSubtree(TreeNode root, TreeNode subRoot) {
        if (root == null && subRoot == null) return true;
        if (root == null || subRoot == null) return false;
        
        // If both the node of root and subRoot are not null then check for the values
        if (root.val != subRoot.val)
            return false;
        
        // If values of root and subRoot match, then check for left and right node of root and subroot also match or not
        return MatchSubtree(root.left, subRoot.left) && MatchSubtree(root.right, subRoot.right);
    }
}
