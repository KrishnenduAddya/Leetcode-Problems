public class Solution {
    public void NextPermutation(int[] nums) {
        int n = nums.Length, i, j;
        for(i = n - 2; i >= 0; i--)
        {
            if(nums[i] < nums[i+1]) // Step 1. Find the first breakdown point from last where nums[i] < nums[i+1]
                break;
        }
        if(i >= 0)
        {
            for(j = n - 1; j > i; j--)
            {
                if(nums[j] > nums[i]) // Step 2. Find the first number from last where nums[j] > nums[i]
                    break;
            }
            // Step 3. Swap nums[j] and nums[i]
            swap(nums, i, j);
            // Step 4. Reverse from nums[i+1] to nums[n-1]
            reverse(nums, i + 1, n - 1);
        }
        else
        {
            reverse(nums, 0, n - 1);
        }
    }
    public void swap(int[] nums, int i, int j)
    {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
    public void reverse(int[] nums, int i, int j)
    {
        while(i < j)
        {
            swap(nums, i++, j--);
        }
    }
}
