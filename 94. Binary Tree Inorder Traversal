Recursive Solution
-------------------

public class Solution {
    public IList<int> InorderTraversal(TreeNode root) {
        List<int> result = new List<int>();
        Traverse(root, result);
        return result;
    }
    
    private void Traverse(TreeNode root, List<int> result)
    {
        if(root == null)
            return;
        Traverse(root.left, result);
        result.Add(root.val);
        Traverse(root.right, result);
    }
}

Iterative Solution
-------------------

T.C - O(N)
S.C - O(H)

public class Solution {
    public IList<int> InorderTraversal(TreeNode root) {
        List<int> inorder = new List<int>();
        Stack<TreeNode> stack = new Stack<TreeNode>();
        TreeNode curr = root;

        while(curr != null || stack.Count > 0)
        {
            while(curr != null)
            {
                stack.Push(curr);
                curr = curr.left;
            }
            curr = stack.Pop();
            inorder.Add(curr.val);
            curr = curr.right;
        }
        return inorder;
    }
}
