public class MyCircularQueue {
    
    int[] queue;
    int front = 0, rear = 0, size = 0;
    public MyCircularQueue(int k) {
        queue = new int[k];
        Array.Fill(queue, -1);
    }
    
    public bool EnQueue(int value) {
        if(IsFull())
            return false;
        if(IsEmpty())
        {
            front = rear = 0;
            queue[rear] = value;
            size++;
            return true;
        }
        rear++;
        rear = rear % queue.Length;
        queue[rear] = value;
        size++;
        return true;
    }
    
    public bool DeQueue() {
        if(IsEmpty())
            return false;
        queue[front] = -1;
        front++;
        front = front % queue.Length;
        size--;
        return true;
    }
    
    public int Front() {
        return queue[front];
    }
    
    public int Rear() {
        return queue[rear];
    }
    
    public bool IsEmpty() {
        return size == 0;
    }
    
    public bool IsFull() {
        return size == queue.Length;
    }
}

/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue obj = new MyCircularQueue(k);
 * bool param_1 = obj.EnQueue(value);
 * bool param_2 = obj.DeQueue();
 * int param_3 = obj.Front();
 * int param_4 = obj.Rear();
 * bool param_5 = obj.IsEmpty();
 * bool param_6 = obj.IsFull();
 */
