Approach 1
-----------

public class Solution {
    public int[][] DiagonalSort(int[][] mat) {
        int m = mat.Length, n = mat[0].Length;
        
        // Diagonals starting from row 0
        for(int col = 0; col < n; col++)
            Sort(mat, 0, col, m, n);
            
        // Diagonals starting from colum 0
        for(int row = 1; row < m; row++)
            Sort(mat, row, 0, m, n);
            
        return mat;
    }
    
    private void Sort(int[][] mat, int row, int col, int m, int n)
    {
        List<int> diagonal = new List<int>();
        int r = row, c = col;
        while(r < m && c < n)
        {
            diagonal.Add(mat[r][c]);
            r++; c++;
        }
        
        diagonal.Sort();
        
        int i = 0;
        r = row; c = col;
        while(r < m && c < n)
        {
            mat[r][c] = diagonal[i++];
            r++; c++;
        }
    }
}

Approach 2
-----------

private void Sort(int[][] mat, int row, int col, int m, int n)
    {
        //Only using the fact that matrix elements from 1 to 100
        int[] values = new int[101];
        int r = row, c = col;
        while(r < m && c < n)
        {
            values[mat[r][c]]++;
            r++; c++;
        }
        
        r = row; c = col;
        for(int i = 1; i <= 100; i++)
        {
            if(values[i] > 0)
            {
                int count = values[i];
                while(count-->0)
                {
                    mat[r][c] = i;
                    r++; c++;
                }
            }
        }
    }
