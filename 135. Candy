public class Solution {
    public int Candy(int[] ratings) {
        int n = ratings.Length;
        int candies = 0;
        
        int[] left = new int[n];
        int[] right = new int[n];
        
        Array.Fill(left, 1);
        Array.Fill(right, 1);
        
        // Left relative array
        for(int i = 1; i < n; i++)
        {
            // If rating is greater than left person rating, give one more candy
            if(ratings[i] > ratings[i - 1])
                left[i] = left[i - 1] + 1;
        }
        // Right relative array
        for(int i = n - 2; i >= 0; i--)
        {
            // If rating is greater than right person rating, give one more candy
            if(ratings[i] > ratings[i + 1])
                right[i] = right[i + 1] + 1;
        }
        
        // Take maximum from two relative arrays
        for(int i = 0; i < n; i++)
            candies = candies + Math.Max(left[i], right[i]);
        
        return candies;
    }
}

Using the same above concept but using only one array
------------------------------------------------------

public class Solution {
    public int Candy(int[] ratings) {
        int n = ratings.Length;
        int[] candies = new int[n];
        Array.Fill(candies, 1);
        
        for(int i = 1; i < n; i++)
        {
            if(ratings[i] > ratings[i - 1])
                candies[i] = candies[i - 1] + 1;
        }
        for(int i = n - 2; i >= 0; i--) 
        {
            if(ratings[i] > ratings[i + 1])
                candies[i] = Math.Max(candies[i], candies[i + 1] + 1);
        }
        
        int total = 0; 
        foreach(int candy in candies) 
            total = total + candy;
        
        return total;
    }
}
