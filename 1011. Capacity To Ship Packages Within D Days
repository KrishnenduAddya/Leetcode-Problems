public class Solution {
    public int ShipWithinDays(int[] weights, int days) {
        int low = 0, high = 0, n = weights.Length;
        
        // Initialize low with largest weight in the array and high with weight array sum as for single element subarray the least weight capacity will be at atleast the largest weight and for whole array maximum weight will be array sum
        foreach(int w in weights)
        {
            low = Math.Max(low, w);
            high = high + w; // high is treated as sum
        }
        
        int mid = 0, capacity = 0;
        while(low <= high)
        {
            mid = low + (high - low) / 2; // Capacity
            // Count stores in how many days all weights can be shipped for a given capacity = mid
            int count = 1, tempWeight = 0;
            foreach(int w in weights)
            {
                if(tempWeight + w <= mid) // If adding next weight, capacity does not exceed then add that weight in belt and can be shipped in the same day
                    tempWeight = tempWeight + w;
                else // else one extra day will be needed, weight starts from that weight
                {
                    tempWeight = w;
                    count++;
                }
            }
            
            // If count <= days i.e shipping possible for capacity = mid, so we will check whether we can minimize the capacity to a least weight
            if(count <= days)
            {
                capacity = mid;
                high = mid - 1;
            } // else increase capacity
            else 
                low = mid + 1;
        }  
        return capacity;
    }
}
